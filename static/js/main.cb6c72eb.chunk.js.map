{"version":3,"sources":["Components/Card.js","Components/CardsList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","serviceWorker.js","index.js"],"names":["card","name","email","id","className","alt","src","CardsList","robots","map","robot","i","Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","height","children","ErrorBoundary","state","hasError","this","setState","React","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAceA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACxB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,6BACI,4BAAKF,GACL,2BAAIC,MCcLK,EAnBG,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACjB,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAOC,GACf,OACI,kBAACC,EAAD,CACIC,IAAOF,EACPR,GAAMO,EAAMP,GACZF,KAAQS,EAAMT,KACdC,MAASQ,EAAMR,aCE5BY,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,yBAAKX,UAAU,OACX,2BACIA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCXI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,UACrCH,EAAMI,WCmBJC,E,kDArBX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTC,UAAU,GAHL,E,gEAQTC,KAAKC,SAAS,CAACF,UAAU,M,+BAIzB,OAAGC,KAAKF,MAAMC,SAEN,wDAGDC,KAAKR,MAAMI,a,GAlBEM,IAAMC,WC8CnBC,G,wDAxCX,aAAe,IAAD,8BACV,gBAYJC,eAAiB,SAACC,GACd,EAAKL,SAAS,CACVM,YAAaD,EAAME,OAAOC,SAb9B,EAAKX,MAAQ,CACTlB,OAAQ,GACR2B,YAAa,IAJP,E,gEAQO,IAAD,OAChBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKb,SAAS,CAAErB,OAAQkC,S,+BAQjC,IAAD,EAC2Bd,KAAKF,MAA7BlB,EADH,EACGA,OAAQ2B,EADX,EACWA,YACVQ,EAAiBnC,EAAOoC,QAAO,SAAAlC,GAC7B,OAAOA,EAAMT,KAAK4C,cAAcC,SAASX,EAAYU,kBAE7D,OAAQrC,EAAOuC,OAGX,yBAAK3C,UAAY,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAca,KAAKK,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAWzB,OAAUmC,OAPjC,wBAAIvC,UAAU,MAAd,e,GA1BM0B,IAAMC,YCKJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.cb6c72eb.chunk.js","sourcesContent":["import React from 'react'\n\nconst card = ({name, email, id}) => {\n    return (\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default card","import React from 'react'\nimport Card from './Card'\n\nconst CardsList = ({ robots }) => {\n    return (\n        <div>\n            {\n                robots.map((robot, i) => {\n                    return (\n                        <Card\n                            key = {i}\n                            id = {robot.id}\n                            name = {robot.name}\n                            email = {robot.email}\n                        />\n                    )\n                })\n            }\n        </div>\n    )\n}\n\nexport default CardsList","import React from 'react'\n\nconst SearchBox = ({ searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </div>\n    )\n}\n\nexport default SearchBox","import React from 'react'\n\nconst Scroll = (props) => {\n    return(\n        <div style={{ overflow: 'scroll', height: '800px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll","import React from 'react'\n\nclass ErrorBoundary extends React.Component {\n    constructor(){\n        super()\n        this.state = {\n            hasError: false,\n        }\n    }\n\n    componentDidCatch(){\n        this.setState({hasError: true})\n    }\n\n    render(){\n        if(this.state.hasError){\n            return(\n                <h1>Sorry, there is an error</h1>\n            )\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary","import React from 'react'\nimport CardsList from '../Components/CardsList'\nimport SearchBox from '../Components/SearchBox'\nimport Scroll from '../Components/Scroll'\nimport ErrorBoundary from '../Components/ErrorBoundary'\nimport './App.css'\n\nclass App extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            robots: [],\n            searchField: ''\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({ robots: users }))\n    }\n    onSearchChange = (event) => {\n        this.setState({\n            searchField: event.target.value\n        })\n    }\n\n    render() {\n        const { robots, searchField } = this.state\n        const filteredRobots = robots.filter(robot => {\n                return robot.name.toLowerCase().includes(searchField.toLowerCase())\n        })\n        return !robots.length ?\n            <h1 className=\"tc\">Loading</h1> :         \n        (\n            <div className = 'tc'>\n                <h1 className='f1'>RoboFriends</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                    <ErrorBoundary>\n                        <CardsList robots = {filteredRobots} />\n                    </ErrorBoundary>\n                </Scroll>\n            </div>\n        )\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}